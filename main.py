# pip install telethon

import os
import re
from typing import Union

from telethon import TelegramClient, events
from telethon.errors import UserAlreadyParticipantError, InviteHashInvalidError, InviteHashExpiredError
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.utils import get_peer_id

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
api_id = 0000 # –í–∞—à API_ID
api_hash = "USER_TOKEN" # –í–∞—à API_HASH

CHANNELS_FILE = "channels.txt" # –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤
USERS_FILE = "users.txt"       # –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

client = TelegramClient("session", api_id, api_hash)

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ ===
waiting_for_channel = False
waiting_for_user = False
channels_peers: set[int] = set()
users: set[int] = set()
registered_peers: set[int] = set()

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===
def load_list(filename: str) -> set[int]:
    if not os.path.exists(filename):
        return set()
    s = set()
    with open(filename, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line:
                try:
                    s.add(int(line))
                except ValueError:
                    pass
    return s

def save_list(filename: str, s: set[int]):
    with open(filename, "w", encoding="utf-8") as f:
        for x in sorted(s):
            f.write(str(x) + "\n")

# === –ü–∞—Ä—Å–∏–Ω–≥ ===
def parse_channel_input(text: str):
    t = text.strip()
    if re.fullmatch(r"-?\d{5,}", t):
        return ("peer", int(t))
    if t.startswith("@"):
        return ("username", t[1:])
    if "t.me/" in t:
        m_inv = re.search(r"(?:joinchat/|\+)([A-Za-z0-9_-]+)", t)
        if m_inv:
            return ("invite", m_inv.group(1))
        name = t.split("t.me/", 1)[1]
        name = name.split("/", 1)[0]
        name = name.split("?", 1)[0]
        name = name.lstrip("@")
        return ("username", name)
    return ("username", t)

async def try_join_if_needed(kind: str, value: Union[str, int]):
    try:
        if kind == "invite":
            await client(ImportChatInviteRequest(value))
        elif kind in ("username", "peer"):
            await client(JoinChannelRequest(value))
    except UserAlreadyParticipantError:
        pass
    except InviteHashInvalidError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞.")
    except InviteHashExpiredError:
        raise ValueError("–ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞.")

async def resolve_peer_id(kind: str, value: Union[str, int]) -> int:
    if kind == "peer":
        return int(value)

    if kind == "invite":
        updates = await client(ImportChatInviteRequest(value))
        if hasattr(updates, "chats") and updates.chats:
            return get_peer_id(updates.chats[0])
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ –∏–Ω–≤–∞–π—Ç—É.")

    await try_join_if_needed(kind, value)
    entity = await client.get_entity(value)
    return get_peer_id(entity)

# === –ü–æ–¥–ø–∏—Å–∫–∞ ===
def register_forward_handler(peer_id: int):
    if peer_id in registered_peers:
        return

    @client.on(events.NewMessage(chats=peer_id))
    async def _forwarder(ev):
        for uid in users:
            try:
                await client.forward_messages(uid, ev.message)
            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ {peer_id} –¥–ª—è {uid}: {e}")

    registered_peers.add(peer_id)
    print(f"[*] –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {peer_id}")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ===
async def add_channel_from_event(event) -> str:
    text = (event.raw_text or "").strip()
    fwd = getattr(event.message, "fwd_from", None)
    pid = None

    if fwd:
        if getattr(fwd, "channel_id", None):
            pid = int("-100" + str(fwd.channel_id))
        elif getattr(fwd, "from_id", None):
            pid = get_peer_id(await client.get_entity(fwd.from_id))
        if pid:
            if pid in channels_peers:
                return f"–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω ({pid})"
            channels_peers.add(pid)
            save_list(CHANNELS_FILE, channels_peers)
            register_forward_handler(pid)
            ent = await client.get_entity(pid)
            title = getattr(ent, "title", None) or getattr(ent, "username", None) or str(pid)
            return f"‚úÖ –ö–∞–Ω–∞–ª ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é."

    if text:
        kind, value = parse_channel_input(text)
        pid = await resolve_peer_id(kind, value)
        if pid in channels_peers:
            return f"–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω ({pid})"
        channels_peers.add(pid)
        save_list(CHANNELS_FILE, channels_peers)
        register_forward_handler(pid)
        ent = await client.get_entity(pid)
        title = getattr(ent, "title", None) or getattr(ent, "username", None) or str(pid)
        return f"‚úÖ –ö–∞–Ω–∞–ª ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ."

    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É."

# === –ö–æ–º–∞–Ω–¥—ã ===
@client.on(events.NewMessage(pattern=r"^/add$"))
async def cmd_add(event):
    global waiting_for_channel
    if event.sender_id not in users:
        return
    waiting_for_channel = True
    await event.reply("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É/@username/-100‚Ä¶ –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")

@client.on(events.NewMessage(pattern=r"^/cancel$"))
async def cmd_cancel(event):
    global waiting_for_channel, waiting_for_user
    if event.sender_id not in users:
        return
    waiting_for_channel = False
    waiting_for_user = False
    await event.reply("–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω.")

@client.on(events.NewMessage(pattern=r"^/list$"))
async def cmd_list(event):
    if event.sender_id not in users:
        return
    lines = ["üìå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:"]
    if channels_peers:
        for pid in sorted(channels_peers):
            try:
                ent = await client.get_entity(pid)
                title = getattr(ent, "title", None) or getattr(ent, "username", None) or str(pid)
            except Exception:
                title = str(pid)
            lines.append(f"- {title} ({pid})")
    else:
        lines.append("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

    lines.append("\nüë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    if users:
        for uid in sorted(users):
            lines.append(f"- {uid}")
    else:
        lines.append("‚ùå –ù–∏–∫–æ–≥–æ –Ω–µ—Ç.")
    await event.reply("\n".join(lines))

@client.on(events.NewMessage(pattern=r"^/help$"))
async def cmd_help(event):
    if event.sender_id not in users:
        return
    text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª\n"
        "/cancel ‚Äì –æ—Ç–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
        "/list ‚Äì —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/remove ‚Äì —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "/adduser ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (ID)\n"
        "/removeuser ‚Äì —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (ID)\n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    )
    await event.reply(text)

# === –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ===
remove_mode = False

@client.on(events.NewMessage(pattern=r"^/remove$"))
async def cmd_remove(event):
    global remove_mode
    if event.sender_id not in users:
        return
    if not channels_peers:
        await event.reply("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return
    remove_mode = True
    await event.reply("–û—Ç–ø—Ä–∞–≤—å peer_id –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

@client.on(events.NewMessage)
async def handle_modes(event):
    global waiting_for_channel, waiting_for_user, remove_mode
    if event.sender_id not in users:
        return

    text = (event.raw_text or "").strip()
    if text.startswith("/"):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

    if waiting_for_channel:
        waiting_for_channel = False
        try:
            msg = await add_channel_from_event(event)
            await event.reply(msg)
        except Exception as e:
            await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif waiting_for_user:
        waiting_for_user = False
        try:
            uid = int(text)
            users.add(uid)
            save_list(USERS_FILE, users)
            await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception:
            await event.reply("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ (ID).")

    elif remove_mode:
        remove_mode = False
        try:
            pid = int(text)
            if pid not in channels_peers:
                await event.reply("‚ùå –¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç.")
                return
            channels_peers.discard(pid)
            save_list(CHANNELS_FILE, channels_peers)
            await event.reply(f"üóë –ö–∞–Ω–∞–ª {pid} —É–¥–∞–ª—ë–Ω.")
        except Exception:
            await event.reply("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ (peer_id).")


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
@client.on(events.NewMessage(pattern=r"^/adduser$"))
async def cmd_adduser(event):
    global waiting_for_user
    if event.sender_id not in users:
        return
    waiting_for_user = True
    await event.reply("–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).")

@client.on(events.NewMessage(pattern=r"^/removeuser$"))
async def cmd_removeuser(event):
    if event.sender_id not in users:
        return
    try:
        uid = int(event.raw_text.strip().split(maxsplit=1)[1])
        if uid not in users:
            await event.reply("‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.")
            return
        users.discard(uid)
        save_list(USERS_FILE, users)
        await event.reply(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.")
    except Exception:
        await event.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /removeuser <ID>")

# === –ó–∞–ø—É—Å–∫ ===
async def bootstrap():
    channels_peers.update(load_list(CHANNELS_FILE))
    users.update(load_list(USERS_FILE))
    for pid in sorted(channels_peers):
        register_forward_handler(pid)
    print(f"[*] –ö–∞–Ω–∞–ª–æ–≤: {len(channels_peers)}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

if __name__ == "__main__":
    client.start()
    client.loop.run_until_complete(bootstrap())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥—ã: /add, /list, /remove, /adduser, /removeuser, /help")
    client.run_until_disconnected()
